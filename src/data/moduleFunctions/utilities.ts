import type { DocFunction } from "../../types/documentation";

export const utilitiesFunctions: DocFunction[] = [
  {
    id: "isTruthy",
    name: "isTruthy",
    module: "utilities",
    signature: "isTruthy(value: unknown): boolean",
    description: "Checks if the given value is truthy.",
    example: `Utilities.isTruthy(1); // true`,
  },
  {
    id: "isFalsy",
    name: "isFalsy",
    module: "utilities",
    signature: "isFalsy(value: unknown): boolean",
    description: "Checks if the given value is falsy.",
    example: `Utilities.isFalsy(0); // true`,
  },
  {
    id: "debounce",
    name: "debounce",
    module: "utilities",
    signature:
      "debounce(func: (...args: unknown[]) => void, delay: number, immediate?: boolean): Function & { cancel(): void }",
    description: "Returns a debounced version of the given function.",
    example: `const debounced = Utilities.debounce(() => console.log('Run'), 300);`,
  },
  {
    id: "throttle",
    name: "throttle",
    module: "utilities",
    signature: "throttle(func: Function, limit: number): Function",
    description: "Returns a throttled version of the given function.",
    example: `const throttled = Utilities.throttle(() => console.log('Run'), 1000);`,
  },
  {
    id: "deepClone",
    name: "deepClone",
    module: "utilities",
    signature: "deepClone<T>(obj: T): T",
    description: "Creates a deep clone of an object using structured cloning.",
    example: `const copy = Utilities.deepClone({ a: 1 });`,
  },
  {
    id: "generateUUID",
    name: "generateUUID",
    module: "utilities",
    signature: "generateUUID(): string",
    description: "Generates a random UUID string.",
    example: `const id = Utilities.generateUUID();`,
  },
  {
    id: "flatten",
    name: "flatten",
    module: "utilities",
    signature: "flatten<T>(arr: (T | T[])[]): T[]",
    description: "Flattens a nested array into a single-level array.",
    example: `Utilities.flatten([1, [2, [3]], 4]); // [1, 2, [3], 4]`,
  },
  {
    id: "isArray",
    name: "isArray",
    module: "utilities",
    signature: "isArray(value: unknown): boolean",
    description: "Checks if the value is an array.",
    example: `Utilities.isArray([]); // true`,
  },
  {
    id: "isObject",
    name: "isObject",
    module: "utilities",
    signature: "isObject(value: unknown): boolean",
    description:
      "Checks if the value is a plain object (not null, not an array).",
    example: `Utilities.isObject({}); // true`,
  },
  {
    id: "randomInt",
    name: "randomInt",
    module: "utilities",
    signature: "randomInt(min?: number, max?: number): number",
    description: "Generates a random integer between min and max (inclusive).",
    example: `Utilities.randomInt(1, 10); // e.g., 7`,
  },
  {
    id: "mergeObjects",
    name: "mergeObjects",
    module: "utilities",
    signature: "mergeObjects<T>(...objects: T[]): T",
    description: "Merges multiple objects into one.",
    example: `Utilities.mergeObjects({ a: 1 }, { b: 2 }); // { a: 1, b: 2 }`,
  },
  {
    id: "isEmpty",
    name: "isEmpty",
    module: "utilities",
    signature: "isEmpty(value: unknown): boolean",
    description: "Checks if an array, string, or object is empty.",
    example: `Utilities.isEmpty([]); // true`,
  },
  {
    id: "getQueryParam",
    name: "getQueryParam",
    module: "utilities",
    signature: "getQueryParam(param: string, url?: string): string | null",
    description: "Gets a query parameter from a URL.",
    example: `Utilities.getQueryParam('id', 'https://site.com/?id=123'); // '123'`,
  },
  {
    id: "isValidEmail",
    name: "isValidEmail",
    module: "utilities",
    signature: "isValidEmail(email: string): boolean",
    description: "Validates an email address.",
    example: `Utilities.isValidEmail('test@example.com'); // true`,
  },
  {
    id: "isMobile",
    name: "isMobile",
    module: "utilities",
    signature: "isMobile(): boolean",
    description: "Detects if the current device is a mobile device.",
    example: `Utilities.isMobile(); // true or false`,
  },
  {
    id: "isTablet",
    name: "isTablet",
    module: "utilities",
    signature: "isTablet(): boolean",
    description: "Detects if the current device is a tablet.",
    example: `Utilities.isTablet(); // true or false`,
  },
  {
    id: "isDesktop",
    name: "isDesktop",
    module: "utilities",
    signature: "isDesktop(): boolean",
    description: "Detects if the current device is a desktop.",
    example: `Utilities.isDesktop(); // true or false`,
  },
  {
    id: "getDeviceType",
    name: "getDeviceType",
    module: "utilities",
    signature: "getDeviceType(): 'mobile' | 'tablet' | 'desktop'",
    description: "Returns the type of device: mobile, tablet, or desktop.",
    example: `Utilities.getDeviceType(); // 'desktop'`,
  },
  {
    id: "getOS",
    name: "getOS",
    module: "utilities",
    signature: "getOS(): string",
    description: "Returns the name of the user's operating system.",
    example: `Utilities.getOS(); // 'Windows'`,
  },
  {
    id: "getBrowser",
    name: "getBrowser",
    module: "utilities",
    signature: "getBrowser(): string",
    description: "Returns the name of the user's browser.",
    example: `Utilities.getBrowser(); // 'Chrome'`,
  },
  {
    id: "getCurrentCoordinates",
    name: "getCurrentCoordinates",
    module: "utilities",
    signature: "getCurrentCoordinates(): Promise<{ lat: number, lon: number }>",
    description: "Returns the current geolocation coordinates of the user.",
    example: `Utilities.getCurrentCoordinates().then(coords => console.log(coords));`,
  },
  {
    id: "getLanguage",
    name: "getLanguage",
    module: "utilities",
    signature: "getLanguage(): string",
    description: "Returns the user's browser language.",
    example: `Utilities.getLanguage(); // 'en-US'`,
  },
  {
    id: "getTimeZone",
    name: "getTimeZone",
    module: "utilities",
    signature: "getTimeZone(): string",
    description: "Returns the user's current time zone.",
    example: `Utilities.getTimeZone(); // 'Europe/Istanbul'`,
  },
  {
    id: "getCountryFromLocale",
    name: "getCountryFromLocale",
    module: "utilities",
    signature: "getCountryFromLocale(): string",
    description: "Extracts the country code from the browser locale.",
    example: `Utilities.getCountryFromLocale(); // 'US'`,
  },
  {
    id: "getReferrer",
    name: "getReferrer",
    module: "utilities",
    signature: "getReferrer(): string | null",
    description: "Returns the document's referrer if available.",
    example: `Utilities.getReferrer(); // e.g., 'https://google.com'`,
  },
  {
    id: "base64Encode",
    name: "base64Encode",
    module: "utilities",
    signature: "base64Encode(value: string): string",
    description: "Encodes a string to Base64.",
    example: `Utilities.base64Encode('hello'); // 'aGVsbG8='`,
  },
  {
    id: "base64Decode",
    name: "base64Decode",
    module: "utilities",
    signature: "base64Decode(value: string): string",
    description: "Decodes a Base64-encoded string.",
    example: `Utilities.base64Decode('aGVsbG8='); // 'hello'`,
  },
  {
    id: "measureTask",
    name: "measureTask",
    module: "utilities",
    signature:
      "measureTask(func: () => void): { time: number, result: unknown }",
    description: "Measures the execution time of a given function.",
    example: `Utilities.measureTask(() => Array(1000).fill(0));`,
  },
  {
    id: "isValidURL",
    name: "isValidURL",
    module: "utilities",
    signature: "isValidURL(url: string): boolean",
    description: "Validates whether the given string is a valid URL.",
    example: `Utilities.isValidURL('https://example.com'); // true`,
  },
  {
    id: "getRandomString",
    name: "getRandomString",
    module: "utilities",
    signature: "getRandomString(length?: number): string",
    description: "Generates a random alphanumeric string of given length.",
    example: `Utilities.getRandomString(8); // e.g., 'aB3dE1Fg'`,
  },
];
