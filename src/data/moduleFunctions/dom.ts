import type { DocFunction } from "../../types/documentation";

export const domFunctions: DocFunction[] = [
  {
    id: "css",
    name: "css",
    module: "dom",
    signature: `css(
  property: string | { [key: string]: string },
  value?: string,
  important?: boolean | string
): Core | string`,
    description: "Gets or sets CSS properties on the selected elements.",
    example: `$('.element').css('color', 'red')\n$('.element').css({ color: 'blue', fontSize: '14px' })`,
  },
  {
    id: "prepend",
    name: "prepend",
    module: "dom",
    signature: "prepend(child: string | HTMLElement | Core): Core",
    description:
      "Prepends content or elements to each element in the set of matched elements.",
    example: `$('.element').prepend('<span>Prepended</span>')`,
  },
  {
    id: "before",
    name: "before",
    module: "dom",
    signature: "before(child: string | HTMLElement | Core): Core",
    description:
      "Inserts content before each element in the set of matched elements.",
    example: `$('.element').before('<div>Before</div>')`,
  },
  {
    id: "after",
    name: "after",
    module: "dom",
    signature: "after(child: string | HTMLElement | Core): Core",
    description:
      "Inserts content after each element in the set of matched elements.",
    example: `$('.element').after('<div>After</div>')`,
  },
  {
    id: "append",
    name: "append",
    module: "dom",
    signature: "append(child: string | HTMLElement | Core): Core",
    description:
      "Appends content or elements to each element in the set of matched elements.",
    example: `$('.element').append('<span>Appended</span>')`,
  },
  {
    id: "focus",
    name: "focus",
    module: "dom",
    signature: "focus(): Core",
    description: "Sets focus on the first matched element.",
    example: `$('.input').focus()`,
  },
  {
    id: "click",
    name: "click",
    module: "dom",
    signature: "click(): Core",
    description: "Triggers a click event on each matched element.",
    example: `$('.button').click()`,
  },
  {
    id: "blur",
    name: "blur",
    module: "dom",
    signature: "blur(): Core",
    description: "Removes focus from the first matched element.",
    example: `$('.input').blur()`,
  },
  {
    id: "zoomIn",
    name: "zoomIn",
    module: "dom",
    signature: "zoomIn(duration?: number, scale?: number): Core",
    description:
      "Animates zooming in of elements with optional duration and scale.",
    example: `$('.element').zoomIn(300, 1.2)`,
  },
  {
    id: "zoomOut",
    name: "zoomOut",
    module: "dom",
    signature: "zoomOut(duration?: number): Core",
    description: "Animates zooming out of elements with optional duration.",
    example: `$('.element').zoomOut(300)`,
  },
  {
    id: "pulseGlow",
    name: "pulseGlow",
    module: "dom",
    signature: `pulseGlow(duration?: number, intensity?: number, colors?: {
  boxShadow: string;
  textShadow: string;
  boxShadowPulse: string;
  textShadowPulse: string;
}): Core`,
    description:
      "Animates a glowing pulse effect on elements with customizable colors and intensity.",
    example: `$('.element').pulseGlow(1000, 0.5, { boxShadow: '0 0 5px red', textShadow: '0 0 5px red', boxShadowPulse: '0 0 20px red', textShadowPulse: '0 0 20px red' })`,
  },
  {
    id: "pulse",
    name: "pulse",
    module: "dom",
    signature: "pulse(duration?: number, scale?: number): Core",
    description: "Animates a pulsing scale effect on elements.",
    example: `$('.element').pulse(1000, 1.1)`,
  },
  {
    id: "bounce",
    name: "bounce",
    module: "dom",
    signature: "bounce(duration?: number, height?: number): Core",
    description: "Animates a bouncing effect on elements.",
    example: `$('.element').bounce(500, 20)`,
  },
  {
    id: "shake",
    name: "shake",
    module: "dom",
    signature: "shake(duration?: number, intensity?: number): Core",
    description: "Animates a shaking effect on elements.",
    example: `$('.element').shake(300, 10)`,
  },
  {
    id: "flip",
    name: "flip",
    module: "dom",
    signature: "flip(duration?: number): Core",
    description: "Animates a flipping effect on elements.",
    example: `$('.element').flip(600)`,
  },
  {
    id: "slideDown",
    name: "slideDown",
    module: "dom",
    signature: "slideDown(duration?: number): Core",
    description: "Slides down the matched elements.",
    example: `$('.element').slideDown(400)`,
  },
  {
    id: "slideUp",
    name: "slideUp",
    module: "dom",
    signature: "slideUp(duration?: number): Core",
    description: "Slides up the matched elements.",
    example: `$('.element').slideUp(400)`,
  },
  {
    id: "slideYToggle",
    name: "slideYToggle",
    module: "dom",
    signature: "slideYToggle(duration?: number): Core",
    description: "Toggles vertical slide up/down animation.",
    example: `$('.element').slideYToggle(400)`,
  },
  {
    id: "slideXToggle",
    name: "slideXToggle",
    module: "dom",
    signature: "slideXToggle(duration?: number): Core",
    description: "Toggles horizontal slide left/right animation.",
    example: `$('.element').slideXToggle(400)`,
  },
  {
    id: "slideRight",
    name: "slideRight",
    module: "dom",
    signature: "slideRight(duration?: number): Core",
    description: "Slides the matched elements to the right.",
    example: `$('.element').slideRight(400)`,
  },
  {
    id: "slideLeft",
    name: "slideLeft",
    module: "dom",
    signature: "slideLeft(duration?: number): Core",
    description: "Slides the matched elements to the left.",
    example: `$('.element').slideLeft(400)`,
  },
  {
    id: "fadeOut",
    name: "fadeOut",
    module: "dom",
    signature: "fadeOut(duration?: number, useVisibility?: boolean): Core",
    description: "Fades out the matched elements, optionally using visibility.",
    example: `$('.element').fadeOut(300)\n$('.element').fadeOut(300, true)`,
  },
  {
    id: "fadeIn",
    name: "fadeIn",
    module: "dom",
    signature: "fadeIn(duration?: number, useVisibility?: boolean): Core",
    description: "Fades in the matched elements, optionally using visibility.",
    example: `$('.element').fadeIn(300)\n$('.element').fadeIn(300, true)`,
  },
  {
    id: "fadeToggle",
    name: "fadeToggle",
    module: "dom",
    signature: "fadeToggle(duration?: number, useVisibility?: boolean): Core",
    description:
      "Toggles fade in/out on matched elements, optionally using visibility.",
    example: `$('.element').fadeToggle(300)\n$('.element').fadeToggle(300, true)`,
  },
  {
    id: "hide",
    name: "hide",
    module: "dom",
    signature: "hide(): Core",
    description: "Hides matched elements (display: none).",
    example: `$('.element').hide()`,
  },
  {
    id: "show",
    name: "show",
    module: "dom",
    signature: "show(): Core",
    description: "Shows matched elements (removes display:none).",
    example: `$('.element').show()`,
  },
  {
    id: "toggle",
    name: "toggle",
    module: "dom",
    signature: "toggle(): Core",
    description: "Toggles visibility of matched elements.",
    example: `$('.element').toggle()`,
  },
  {
    id: "toggleVisibility",
    name: "toggleVisibility",
    module: "dom",
    signature: "toggleVisibility(): Core",
    description:
      "Toggles CSS visibility property between 'visible' and 'hidden'.",
    example: `$('.element').toggleVisibility()`,
  },
  {
    id: "visible",
    name: "visible",
    module: "dom",
    signature: "visible(): Core",
    description: "Sets elements to be visible (CSS visibility: visible).",
    example: `$('.element').visible()`,
  },
  {
    id: "invisible",
    name: "invisible",
    module: "dom",
    signature: "invisible(): Core",
    description: "Sets elements to be invisible (CSS visibility: hidden).",
    example: `$('.element').invisible()`,
  },
  {
    id: "directionalFade",
    name: "directionalFade",
    module: "dom",
    signature:
      "directionalFade(direction: 'top' | 'bottom' | 'left' | 'right', duration?: number): Core",
    description:
      "Fades the element in from a specified direction with animation.",
    example: `$('.element').directionalFade('top', 400)`,
  },
];
