import type { DocFunction } from "../../types/documentation";

export const coreFunctions: DocFunction[] = [
  {
    id: "$",
    name: "$",
    module: "core",
    signature: "$(selector: string | HTMLElement | HTMLElement[]): Core",
    description: "Selects elements from the DOM.",
    example: `$('div') // Selects all <div> elements in the document`,
  },
  {
    id: "data",
    name: "data",
    module: "core",
    signature:
      "data(\nname?: string | Record<string, string | null>,\nvalue?: string | null): string | null | Core)",
    description: "Gets or sets data attributes on an element.",
    example: `data(document.body, 'key', 'value') // Sets data-key="value" on <body>`,
  },
  {
    id: "each",
    name: "each",
    module: "core",
    signature: "each(callback: (el: HTMLElement, index: number) => void): Core",
    description: "Iterates over selected elements and applies a callback.",
    example: `$('div').each((el, index) => {\n  console.log(el, index);\n})`,
  },
  {
    id: "map",
    name: "map",
    module: "core",
    signature:
      "map<T extends HTMLElement>(callback: (el: HTMLElement, index: number) => T): Core",
    description:
      "Maps selected elements to a new array and wraps it as a Core instance.",
    example: `$('div').map((el, i) => el)`,
  },
  {
    id: "filter",
    name: "filter",
    module: "core",
    signature:
      "filter(callback: (el: HTMLElement, index: number) => boolean): Core",
    description: "Filters selected elements based on a condition.",
    example: `$('div').filter((el) => el.classList.contains('active'))`,
  },
  {
    id: "first",
    name: "first",
    module: "core",
    signature: "first(): Core",
    description: "Returns the first element in the selection.",
    example: `$('div').first()`,
  },
  {
    id: "last",
    name: "last",
    module: "core",
    signature: "last(): Core",
    description: "Returns the last element in the selection.",
    example: `$('div').last()`,
  },
  {
    id: "isEmpty",
    name: "isEmpty",
    module: "core",
    signature: "isEmpty(): boolean",
    description: "Checks if the selection is empty.",
    example: `$('div').isEmpty()`,
  },
  {
    id: "exists",
    name: "exists",
    module: "core",
    signature: "exists(): boolean",
    description: "Checks if any element exists in the selection.",
    example: `$('div').exists()`,
  },
  {
    id: "add",
    name: "add",
    module: "core",
    signature: "add(selector: string | Core): Core",
    description: "Adds elements to the current selection.",
    example: `$('div').add('.extra')`,
  },
  {
    id: "remove",
    name: "remove",
    module: "core",
    signature: "remove(): Core",
    description: "Removes the selected elements from the DOM.",
    example: `$('div').remove()`,
  },
  {
    id: "removeChild",
    name: "removeChild",
    module: "core",
    signature: "removeChild(index: number): Core",
    description: "Removes the child at a given index from the selection.",
    example: `$('ul').removeChild(0)`,
  },
  {
    id: "attr",
    name: "attr",
    module: "core",
    signature: "attr(name: string, value?: string): Core | string",
    description: "Gets or sets an attribute on elements.",
    example: `$('div').attr('id', 'main')`,
  },
  {
    id: "removeAttr",
    name: "removeAttr",
    module: "core",
    signature: "removeAttr(name: string): Core",
    description: "Removes an attribute from selected elements.",
    example: `$('div').removeAttr('id')`,
  },
  {
    id: "text",
    name: "text",
    module: "core",
    signature: "text(): string\ntext(text: string): Core",
    description: "Gets or sets the text content of elements.",
    example: `$('p').text('Hello')`,
  },
  {
    id: "html",
    name: "html",
    module: "core",
    signature: "html(): string",
    description: "Gets the inner HTML of the first selected element.",
    example: `$('div').html()`,
  },
  {
    id: "val",
    name: "val",
    module: "core",
    signature: "val(): string",
    description: "Gets the value attribute of the first selected element.",
    example: `$('input').val()`,
  },
  {
    id: "addClass",
    name: "addClass",
    module: "core",
    signature: "addClass(className: string): Core",
    description: "Adds a class to each selected element.",
    example: `$('div').addClass('active')`,
  },
  {
    id: "removeClass",
    name: "removeClass",
    module: "core",
    signature: "removeClass(className: string): Core",
    description: "Removes a class from each selected element.",
    example: `$('div').removeClass('hidden')`,
  },
  {
    id: "toggleClass",
    name: "toggleClass",
    module: "core",
    signature: "toggleClass(className: string): Core",
    description: "Toggles a class on each selected element.",
    example: `$('div').toggleClass('open')`,
  },
  {
    id: "hasClass",
    name: "hasClass",
    module: "core",
    signature: "hasClass(className: string): boolean",
    description: "Checks if any selected element has the given class.",
    example: `$('div').hasClass('active')`,
  },
  {
    id: "children",
    name: "children",
    module: "core",
    signature: "children(): Core",
    description: "Returns all child elements of the selected elements.",
    example: `$('ul').children()`,
  },
  {
    id: "parent",
    name: "parent",
    module: "core",
    signature: "parent(): Core",
    description: "Returns the direct parent elements of the selected elements.",
    example: `$('li').parent()`,
  },
  {
    id: "parents",
    name: "parents",
    module: "core",
    signature: "parents(): Core",
    description: "Returns all ancestor elements of the selected elements.",
    example: `$('span').parents()`,
  },
  {
    id: "siblings",
    name: "siblings",
    module: "core",
    signature: "siblings(): Core",
    description: "Returns all sibling elements of the selected elements.",
    example: `$('li').siblings()`,
  },
  {
    id: "get",
    name: "get",
    module: "core",
    signature:
      "get(index: number, core?: boolean): HTMLElement | Core | undefined",
    description:
      "Gets an element by index, optionally returning a Core wrapper.",
    example: `$('div').get(0)`,
  },
  {
    id: "eq",
    name: "eq",
    module: "core",
    signature: "eq(index: number): Core",
    description: "Gets the element at the given index as a Core instance.",
    example: `$('div').eq(1)`,
  },
  {
    id: "id",
    name: "id",
    module: "core",
    signature: "id(identifier?: string): string | boolean | undefined",
    description:
      "Gets the ID of the first element or checks if it matches a given ID.",
    example: `$('div').id()`,
  },
  {
    id: "is",
    name: "is",
    module: "core",
    signature:
      "is(selector: string | Element | ((el: HTMLElement) => boolean)): boolean",
    description:
      "Checks if the first selected element matches the given selector or condition.",
    example: `$('div').is('.active')`,
  },
  {
    id: "find",
    name: "find",
    module: "core",
    signature: "find(selector: string): Core",
    description: "Finds descendant elements matching a selector.",
    example: `$('div').find('span')`,
  },
  {
    id: "classList",
    name: "classList",
    module: "core",
    signature: "classList(): string",
    description:
      "Returns the class list (as a string) of the first selected element.",
    example: `$('div').classList()`,
  },
  {
    id: "length",
    name: "length",
    module: "core",
    signature: "length: number",
    description: "Returns the number of selected elements.",
    example: `$('div').length`,
  },
];
